#!/usr/bin/env node

'use strict';

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Ensure environment variables are read.
require('../src/env');

const chalk = require('chalk');
const clearConsole = require('react-dev-utils/clearConsole');
const formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const webpack = require('webpack');
const config = require('../config/webpack.config.dev');
const paths = require('../src/paths');

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appMain])) {
  process.exit(1);
}

const isInteractive = process.stdout.isTTY;

const compiler = webpack(config);

const watcher = compiler.watch({}, (err, stats) => {
  if (isInteractive) {
    clearConsole();
  }

  if (err) {
    console.log(chalk.red('Failed to compile.'));
    console.log();
    console.log(err.message || err);
    console.log();
    return;
  }

  const { errors, warnings } = formatWebpackMessages(stats.toJson({}, true));

  if (errors.length > 0) {
    const error = new Error(errors.join('\n\n'));
    console.log(chalk.red('Failed to compile.'));
    console.log();
    console.log(error.message || error);
  } else if (warnings.length > 0) {
    console.log(chalk.yellow('Compiled with warnings.'));
    console.log();
    console.log(warnings.join('\n\n'));
    console.log();
    console.log(`Search for the ${chalk.underline(chalk.yellow('keywords'))} to learn more about each warning.`);
    console.log(`To ignore, add ${chalk.cyan('// eslint-disable-next-line')} to the line before.`);
  } else {
    console.log(chalk.green('Compiled successfully.'));
  }
  console.log();
});

['SIGINT', 'SIGTERM'].forEach(function(sig) {
  process.on(sig, function() {
    watcher.close();
    process.exit();
  });
});
