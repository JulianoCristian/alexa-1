#!/usr/bin/env node

'use strict';

const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const path = require('path');
const fs = require('fs-extra');
const webpack = require('webpack');
const chalk = require('chalk');
const formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');
const config = require('../config/webpack.config.prod');

const appDirectory = fs.realpathSync(process.cwd());
const resolveApp = relativePath => path.resolve(appDirectory, relativePath);

const packageJson = require(resolveApp('package.json'));
const buildDirectory = resolveApp('build');

// Warn and crash if required files are missing
if (!checkRequiredFiles([packageJson.main])) {
  process.exit(1);
}

Promise.resolve().then(() => {
  return fs.emptyDir(buildDirectory);
}).then(() => {
  return build(config);
}).then((warnings) => {
  if (warnings.length) {
    console.log(chalk.yellow('Compiled with warnings.'));
    console.log();
    console.log(warnings.join('\n\n'));
    console.log();
    console.log(`Search for the ${chalk.underline(chalk.yellow('keywords'))} to learn more about each warning.`);
    console.log(`To ignore, add ${chalk.cyan('// eslint-disable-next-line')} to the line before.`);
    console.log();
  } else {
    console.log(chalk.green('Compiled successfully.'));
    console.log();
  }

  console.log();
}).catch((err) => {
  console.log(chalk.red('Failed to compile.'));
  console.log();
  console.log(err.message || err);
  console.log();
  process.exit(1);
});

function build(config) {
  const compiler = webpack(config);
  return new Promise((resolve, reject) => {
    compiler.run((err, stats) => {
      if (err) {
        return reject(err);
      }

      const messages = formatWebpackMessages(stats.toJson({}, true));

      if (messages.errors.length) {
        return reject(new Error(messages.errors.join('\n\n')));
      }

      if (process.env.CI && messages.warnings.length > 0) {
        console.log();
        console.log(chalk.yellow('Treating warnings as errors because process.env.CI = true.'));
        console.log(chalk.yellow('Most CI servers set it automatically.'));
        console.log();

        return reject(new Error(messages.warnings.join('\n\n')));
      }

      return resolve(messages.warnings);
    });
  });
}
