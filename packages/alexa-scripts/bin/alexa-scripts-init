#!/usr/bin/env node

'use strict';

const cmdline = require('commander');
const { version } = require('../package.json');
const path = require('path');
const fs = require('fs-extra');
const spawn = require('cross-spawn');
const { format } = require('prettier-package-json');
const latestVersion = require('latest-version');

cmdline
    .version(version)
    .arguments('<path>', 'Path to app')
    .parse(process.argv);

const [root] = cmdline.args || [];

const setupPackage = (root) => () => {
  const dependencies = [
    'alexa-annotations',
    'alexa-response',
    'alexa-request'
  ];

  return Promise.all(
    dependencies.map((dependency) => latestVersion(dependency).then((version) => ({ [dependency]: `^${version}` })))
  ).then((deps) => {
    return deps.reduce((a, b) => Object.assign({}, a, b));
  }).then((deps) => {
    const packageJson = require(path.join(root, 'package.json'));
    return Object.assign({}, packageJson, {
      main: './src/index.js',
      scripts: Object.assign({}, packageJson.scripts, {
        start: 'alexa-scripts start',
        build: 'alexa-scripts build',
        test: 'alexa-scripts test'
      }),
      dependencies: Object.assign({}, packageJson.dependencies, {
        'alexa-annotations': deps['alexa-annotations'],
        'alexa-response': deps['alexa-response']
      }),
      devDependencies: Object.assign({}, packageJson.devDependencies, {
        'alexa-request': deps['alexa-request']
      }),
      keywords: [
        ...new Set([
          ...(packageJson.keywords || []),
          'alexa',
          'alexa-skill',
          'amazon-echo',
          'create-alexa-app',
          'echo'
        ])
      ]
    });
  }).then((newPackageJson) => {
    return fs.writeFile(path.join(root, 'package.json'), format(newPackageJson));
  }).then(() => {
    return root;
  });
};

const copyTemplate = (root) => {
  const template = path.join(__dirname, '..', 'template');
  return fs.copy(template, root).then(() => root);
};

const moveDotFiles = (...files) => (root) => {
  return Promise.all(files.map((file) => fs.move(path.join(root, file), path.join(root, `.${file}`)))).then(() => root).catch(() => root);
};

const run = (command, ...args) => new Promise((resolve, reject) => {
  spawn(command, args, { stdio: 'inherit' }).on('close', (exitCode) => {
    if (exitCode !== 0) {
      reject(`${command} ${args.join(' ')}`);
    } else {
      resolve();
    }
  });
});

const installDependencies = (root) => {
  process.chdir(root);
  return run('npm', 'install');
};

Promise.resolve()
  .then(setupPackage(root))
  .then(copyTemplate)
  .then(moveDotFiles('gitignore'))
  .then(installDependencies).then(() => {
    console.log('Initialization complete');
  }).catch((error) => {
    console.error(error);
    process.exit(1);
  });
